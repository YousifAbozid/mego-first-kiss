//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id              String      @id() @default(uuid())
  name            String?
  email           String?     @unique()
  pictureUrl      String?     @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation String?
  status          UserStatus  @default(VERIFIED)
  globalRole      String      @default("USER")
  /// @password
  /// @omit
  password        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt()
  emailsAsSender  EmailData[] @relation("sender")
  recipients      Recipient[] @relation("user")
  folders         Folder[]    @relation("user")
}

/// @@allow('all', true)
model EmailData {
  id          String       @id() @default(uuid())
  subject     String?
  content     String?
  status      String?
  isDraft     Boolean
  isRead      Boolean
  senderId    String?
  sender      User?        @relation(fields: [senderId], references: [id], name: "sender")
  recipients  Recipient[]  @relation("email")
  attachments Attachment[] @relation("email")
  folders     Folder[]     @relation("email")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Recipient {
  id        String     @id() @default(uuid())
  type      String?
  emailId   String?
  email     EmailData? @relation(fields: [emailId], references: [id], name: "email")
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Attachment {
  id        String     @id() @default(uuid())
  fileName  String?
  fileUrl   String?
  fileSize  String?
  mimeType  String?
  emailId   String?
  email     EmailData? @relation(fields: [emailId], references: [id], name: "email")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Folder {
  id        String     @id() @default(uuid())
  name      String?
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], name: "user")
  emailId   String?
  email     EmailData? @relation(fields: [emailId], references: [id], name: "email")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt()
}
